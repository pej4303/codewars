# log4j.rootLogger = debug, stdout, dailyfile
#log4j.appender.test.layout.ConversionPattern=%5p ({%t} %F[%M]:%L) [%d] - %m%n

# log level : TRACE > DEBUG > INFO > WARN > ERROR > FATAL

# %d : 로그의 기록시간을 출력
# %p : 로깅의 레벨을 출력
# %F : 로깅이 발생한 프로그램의 파일명을 출력
# %M : 로깅이 발생한 메소드의 이름을 출력
# %I : 로깅이 발생한 호출지의 정보를 출력
# %L : 로깅이 발생한 호출지의 라인수를 출력
# %t : 로깅이 발생한 Thread명을 출력
# %c : 로깅이 발생한 카테고리를 출력 예) {3}이면 a.b.c 까지 나옴 
# %C : 로깅이 발생한 클래스명을 출력
# %m : 로그 메시지를 출력
# %n : 개행 문자를 출력
# %r : 어플리케이션이 시작 이후부터 로깅이 발생한 시점까지의 시간(ms)을 출력

log4j.rootLogger = debug, test
log4j.appender.test = org.apache.log4j.ConsoleAppender
log4j.appender.test.layout = org.apache.log4j.PatternLayout
log4j.appender.test.layout.ConversionPattern = [%d{yyyy-MM-dd HH:mm:sss}] %5p (%c{3} - %F) %M:%L  - %m%n


# file log
# log4j.appender.dailyfile.Threshold = DEBUG
# log4j.appender.dailyfile = org.apache.log4j.DailyRollingFileAppender
# log4j.appender.dailyfile.File = c:\\log\\logfile.log //여기에 지정된 폴더로 날짜별로 로그파일이 생성된다
# log4j.appender.dailyfile.layout = org.apache.log4j.PatternLayout
# log4j.appender.dailyfile.layout.ConversionPattern=%5p ({%t} %F[%M]:%L) [%d] - %m%n
